# Enumerations

It is common for a field to only accept or provide a discrete and limited set
of values. In these cases, it can be useful to use enumerations (generally
abbreviated "enums") in order to clearly communicate what the set of allowed
values are.

## Guidance

APIs **may** expose enum objects for sets of values that are expected to change
infrequently:

```typescript
// Possible formats in which a book may be published.
enum Format {
  // The printed format, in hardback.
  Hardback = 'HARDBACK',

  // The printed format, in paperback.
  Paperback = 'PAPERBACK',

  // An electronic book format.
  Ebook = 'EBOOK',

  // An audio recording.
  Audiobook = 'AUDIOBOOK',
}
```

- All enum values **should** use `UPPER_SNAKE_CASE`.
- Enums **should** document whether the enum is frozen or they expect to add
  values in the future.

### When to use enums

Enums can be more accessible and readable than strings or booleans in many
cases, but they do add overhead when they change. Therefore, enums **should**
receive new values infrequently. While the definition of "infrequently" may
change based on individual use cases, a good rule of thumb is no more than once
a year. For enums that change frequently, the API **should** use a string and
document the format.

Additionally, enums **should not** be used when there is a competing,
widely-adopted standard representation (such as with [language codes][bcp-47]
or [media types][]).

**Note:** If an enumerated value needs to be shared across APIs, an enum
**may** be used, but the assignment between enum values and their corresponding
integers **must** match.

### Alternatives

For enumerated values where the set of allowed values changes frequently, APIs
**should** use a `string` field instead, and **must** document the allowed
values. String fields with enumerated values **should** use `kebab-case` for
their values.

For enumerated values where there is a competing, widely-adopted standard
representation (generally, but not necessarily, a string), that standard
representation **should** be used. This is true even if only a small subset of
values are permitted, because using enums in this situation often leads to
frustrating lookup tables when trying to use multiple APIs together.

Boolean fields **may** be used in situations where it is clear that no further
flexibility will be needed. The default value **must** be `false`.

**Note:** When using protocol buffers, it is impossible to distinguish between
`false` and unset. If this is a requirement, an enum **may** be a better design
choice (although `google.protobuf.BoolValue` is also available).

## Interface Definitions

{% tab proto %}

{% sample 'enum.proto', 'enum Format' %}

- The zero value of the enum **should** be the name of the enum itself followed
  by the suffix `_UNSPECIFIED`. The service **may** either allow or prohibit
  use of this value.
- Enums which will only be used in a single message **should** be nested within
  that message. In this case, the enum **should** be declared immediately
  before it is used.
- If multiple enums are in the same namespace, they **must not** share any
  values. (This is because enums do not provide their own namespace for their
  values in some languages.)
- If an enumerated value needs to be shared across APIs, an enum **may** be
  used, but the assignment between the value names and the tag numbers **must**
  match.

{% tab oas %}

{% sample 'enum.oas.yaml', 'format' %}

- Enumerated fields **should** be strings.
- If the enum is optional, The `null` value **should** be used as the empty
  value, and **should** be the first value specified.

**Note:** If `null` is a valid value, OpenAPI 3.0 also requires that
`nullable: true` is specified for the field.

{% endtabs %}

## Further reading

- For states, a special type of enum, see AIP-216.

[bcp-47]: https://en.wikipedia.org/wiki/IETF_language_tag
[media types]: https://en.wikipedia.org/wiki/Media_type
